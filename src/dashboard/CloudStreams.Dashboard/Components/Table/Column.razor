@namespace CloudStreams.Dashboard.Components
@using System.Linq.Expressions;
@using System.Reflection;
@using System.ComponentModel.DataAnnotations;
@using Hylo;
@typeparam TData

@code {

    [CascadingParameter] public Table<TData> Table { get; set; } = null!;

    [Parameter] public string? Name { get; set; }

    [Parameter] public string? CssClass { get; set; }

    [Parameter] public string? Description { get; set; }

    [Parameter] public Type? Type { get; set; }

    [Parameter] public string? Format { get; set; }

    [Parameter] public IFormatProvider? FormatProvider { get; set; }

    [Parameter] public PropertyPath? PropertyPath { get; set; }

    [Parameter] public bool IsDraggable { get; set; } = true;

    [Parameter] public bool IsFilterable { get; set; } = true;

    [Parameter] public bool IsSorteable { get; set; } = true;

    [Parameter] public bool IsVisible { get; set; } = true;

    [Parameter] public int? DisplayOrder { get; set; }

    [Parameter] public Expression<Func<TData, object?>>? ValueProvider { get; set; }

    [Parameter] public RenderFragment<ColumnHeaderRenderingContext<TData>>? HeaderTemplate { get; set; }

    [Parameter] public RenderFragment<CellRenderingContext<TData>>? CellTemplate { get; set; }

    [Parameter] public EventCallback<Column<TData>> OnDragStart { get; set; }

    [Parameter] public EventCallback<Column<TData>> OnDragEnd { get; set; }

    [Parameter] public EventCallback<Column<TData>> OnDrop { get; set; }

    public SortMode SortMode { get; private set; }

    public bool AutoGenerated { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.Table.AddColumn(this);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.ValueProvider == null)
            this.BuildValueProvider();
    }

    private void BuildValueProvider()
    {
        if(this.PropertyPath == null)
        {
            this.ValueProvider = _ => null;
        }
        else
        {
            var parameterExpression = Expression.Parameter(typeof(TData));
            var memberExpression = this.PropertyPath.ToExpression(parameterExpression);
            var bodyExpression = Expression.Convert(memberExpression, typeof(object));
            this.Type = memberExpression.Type;
            this.ValueProvider = Expression.Lambda<Func<TData, object?>>(bodyExpression, parameterExpression);
        }
    }

    public object? GetValueFor(TData item)
    {
        if (this.ValueProvider == null)
            this.BuildValueProvider();
        var valueProvider = this.ValueProvider!.Compile();
        object? value = null;
        try
        {
            value = valueProvider.Invoke(item);
        }
        catch { }
        if (value == null)
            return null;
        if (string.IsNullOrWhiteSpace(this.Format)
            || value is not IFormattable formattable)
            return value;
        return formattable.ToString(this.Format, this.FormatProvider);
    }

    public void ToggleSortMode()
    {
        if (!this.IsSorteable)
            return;
        int sortModeValue = (int)this.SortMode;
        sortModeValue++;
        if (sortModeValue > 2)
            sortModeValue = 0;
        this.SortMode = (SortMode)sortModeValue;
    }

    public static Column<TData> CreateFor(PropertyInfo property)
    {
        var name = property.Name;
        var description = string.Empty;
        var displayOrder = null as int?;
        if (property.TryGetCustomAttribute<DisplayAttribute>(out var displayAttribute) && displayAttribute != null)
        {
            name = displayAttribute.Name;
            description = displayAttribute.Description;
            displayOrder = displayAttribute.Order;
        } 
        return new()
        {
            Name = name,
            Description = description,
            DisplayOrder = displayOrder,
            PropertyPath = PropertyPath.Parse(property.Name),
            AutoGenerated = true,
        };
    }

}
