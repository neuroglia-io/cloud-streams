@namespace CloudStreams.Dashboard.Components
@using CloudStreams.Dashboard.Components.ReadOptionsFormStateManagement
@inherits StatefulComponent<ReadOptionsFormStore, ReadOptionsFormState>

<div id="@(id + "read-options-form")" class="input-group mb-3">
    <div class="form-floating">
        <select id="@(id + "partitionType")" class="form-select" name="partitionType" @onchange="e => Store.SetPartitionType(string.IsNullOrWhiteSpace((string?)e.Value) ? null : Enum.Parse<CloudEventPartitionType>((string)e.Value!))">
            <option value="" selected="@(partitionType == null)"></option>
            @foreach (var value in Enum.GetValues<CloudEventPartitionType>())
            {
                <option value="@value" selected="@(partitionType == value)">@value</option>
            }
        </select>
        <label for="@(id + "partitionType")">Partition Type</label>
    </div>
    <div class="form-floating">
        <input id="@(id + "partitionId")" type="text" class="form-control" value="@partitionId" list="@(id + "partitions")" autocomplete="on" @onchange="e => Store.SetPartitionId((string?)e.Value)" />
        <datalist id="@(id + "partitions")">
            @if (partitions != null)
            {
                foreach (var partition in partitions)
                {
                    <option value="@partition"></option>
                }
            }
        </datalist>
        <label for="@(id + "partitionId")">Partition Id</label>
    </div>
    <div class="form-floating">
        <select id="@(id + "direction")" class="form-select" name="direction" @onchange="e => Store.SetDirection(Enum.Parse<StreamReadDirection>((string)e.Value!))">
            @foreach (var value in Enum.GetValues<StreamReadDirection>())
            {
                <option value="@value" selected="@(direction == value)">@value</option>
            }
        </select>
        <label for="@(id + "direction")">Direction</label>
    </div>
    <div class="form-floating">
        <input id="@(id + "offset")" type="number" class="form-control" value="@offset" @onchange="e => Store.SetOffset(string.IsNullOrWhiteSpace((string?)e.Value) ? null : long.Parse((string?)e.Value!))" />
        <label for="@(id + "offset")">Offset</label>
    </div>
    @if (!Compact)
    {
        <div class="form-floating">
            <input id="@(id + "length")" type="number" min="0" max="@maxLength" class="form-control" value="@length" @onchange="e => Store.SetLength(string.IsNullOrWhiteSpace((string?)e.Value) ? null : ulong.Parse((string?)e.Value!))" />
            <label for="@(id + "length")">length</label>
        </div>
    }
    <button class="btn btn-outline-danger" type="button" @onclick="Reset"><span class="bi bi-x-circle"></span></button>
</div>

@code {
    /// <summary>
    /// Defines if the <see cref="ReadOptionsForm"/> should display offset and length fields or not
    /// </summary>
    [Parameter] public bool Compact { get; set; } = true;

    /// <summary>
    /// The <see cref="StreamReadOptions"/> to build the <see cref="ReadOptionsForm"/> with
    /// </summary>
    private StreamReadOptions? _streamReadOptions = null;
    [Parameter] public StreamReadOptions? StreamReadOptions { get; set; }

    /// <summary>
    /// The <see cref="Refresher"/> used to forcefully refresh the component's contextual data
    /// </summary>
    private Refresher? _refresher = null;
    [Parameter] public Refresher? Refresher { get; set; }

    /// <summary>
    /// The <see cref="StreamReadOptions"/> emitted by the form
    /// </summary>
    [Parameter] public EventCallback<StreamReadOptions> OnChange { get; set; }

    /// <summary>
    /// The total count of <see cref="CloudEvent"/>s for the selection partition
    /// </summary>
    [Parameter] public EventCallback<ulong?> OnMaxLengthChange { get; set; }

    /// <summary>
    /// Reflects the <see cref="ReadOptionsFormStore.PartitionType"/>
    /// </summary>
    private CloudEventPartitionType? partitionType = null;
    /// <summary>
    /// Reflects the <see cref="ReadOptionsFormStore.PartitionId"/>
    /// </summary>
    private string? partitionId = null;
    /// <summary>
    /// Reflects the <see cref="ReadOptionsFormStore.Direction"/>
    /// </summary>
    private StreamReadDirection direction;
    /// <summary>
    /// Reflects the <see cref="ReadOptionsFormStore.Offset"/>
    /// </summary>
    private long? offset = null;
    /// <summary>
    /// Reflects the <see cref="ReadOptionsFormStore.Length"/>
    /// </summary>
    private ulong? length;
    /// <summary>
    /// Reflects the <see cref="ReadOptionsFormStore.MaxLength"/>
    /// </summary>
    private ulong? maxLength;
    /// <summary>
    /// Reflects the <see cref="ReadOptionsFormStore.Partitions"/>
    /// </summary>
    private List<string>? partitions = null;
    /// <summary>
    /// A random id used to bind data lists
    /// </summary>
    private string id = Guid.NewGuid().ToString();

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);
        this.Store.PartitionType.Subscribe(partitionType => this.OnStateChanged(cmp => cmp.partitionType = partitionType), token: this.CancellationTokenSource.Token);
        this.Store.PartitionId.Subscribe(partitionId => this.OnStateChanged(cmp => cmp.partitionId = partitionId), token: this.CancellationTokenSource.Token);
        this.Store.Direction.Subscribe(direction => this.OnStateChanged(cmp => cmp.direction = direction), token: this.CancellationTokenSource.Token);
        this.Store.Offset.Subscribe(offset => this.OnStateChanged(cmp => cmp.offset = offset), token: this.CancellationTokenSource.Token);
        this.Store.Length.Subscribe(length => this.OnStateChanged(cmp => cmp.length = length), token: this.CancellationTokenSource.Token);
        this.Store.MaxLength.Subscribe(maxLength => this.OnStateChanged(cmp => cmp.maxLength = maxLength), token: this.CancellationTokenSource.Token);
        this.Store.Partitions.Subscribe(partitions => this.OnStateChanged(cmp => cmp.partitions = partitions), token: this.CancellationTokenSource.Token);
        this.Store.ReadOptions.SubscribeAsync(this.OnChange.InvokeAsync, cancellationToken: this.CancellationTokenSource.Token);
        this.Store.MaxLength.SubscribeAsync(this.OnMaxLengthChange.InvokeAsync, cancellationToken: this.CancellationTokenSource.Token);
    }

    /// <inheritdoc/>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (this._streamReadOptions != this.StreamReadOptions)
        {
            this._streamReadOptions = this.StreamReadOptions;
            if (this._streamReadOptions == null)
            {
                this.Reset();
                return;
            }
            this.Store.SetReadOptions(this._streamReadOptions);
        }
        if (this._refresher != this.Refresher)
        {
            this._refresher = this.Refresher;
            if (this._refresher != null)
            {
                this._refresher.Refreshed += OnRefreshAsync;
            }
        }
    }

    /// <summary>
    /// Sets the <see cref="StreamReadOptions.Partition"/>
    /// </summary>
    /// <param name="type">The <see cref="StreamReadOptions.Partition"/> type</param>
    /// <param name="id">The <see cref="StreamReadOptions.Partition"/> id</param>
    public void SetPartition(CloudEventPartitionType type, string id)
    {
        this.Store.SetPartitionType(type);
        this.Store.SetPartitionId(id);
    }

    /// <summary>
    /// Updates the stored metadata for the current stream/partition
    /// </summary>
    /// <returns></returns>
    private async Task OnRefreshAsync(object? sender)
    {
        await this.Store.UpdateMetadataAsync((this.partitionType, this.partitionId));
    }

    /// <summary>
    /// Patches the <see cref="ReadOptionsForm"/>'s fields after a <see cref="ReadOptionsFormStore"/>'s change
    /// </summary>
    /// <param name="patch">The patch to apply</param>
    private void OnStateChanged(Action<ReadOptionsForm> patch)
    {
        patch(this);
        this.StateHasChanged();
    }

    /// <summary>
    /// Resets the <see cref="ReadOptionsForm"/>
    /// </summary>
    private void Reset()
    {
        this.Store.SetPartitionType(null);
        this.Store.SetPartitionId(null);
        this.Store.SetDirection(StreamReadDirection.Backwards);
        this.Store.SetOffset(null);
        this.Store.SetLength(null);
    }

    /// <inheritdoc/>
    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            if (this._refresher != null)
            {
                this._refresher.Refreshed -= OnRefreshAsync;
            }
        }
        base.Dispose(disposing);
    }
}
