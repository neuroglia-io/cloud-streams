@namespace CloudStreams.Dashboard.Components
@using CloudStreams.Dashboard.Components.TimelineStateManagement
@inherits StatefulComponent<TimelineStore, TimelineState>
@implements IAsyncDisposable

<div class="timeline-container">
    <div class="controls">
        @if (streamsReadOptions != null)
        {
            <div class="mb-3">
                @for(int i = 0, c = streamsReadOptions.Count(); i<c; i++)
                {
                    int optionIndex = i;
                    <div class="d-flex">
                        <ReadOptionsForm StreamReadOptions="streamsReadOptions.ElementAt(i)" Compact="false" OnChange="(readOptions) => Store.SetStreamsReadOption(optionIndex, readOptions)"></ReadOptionsForm>
                        <Button class="ms-3 mb-3" Color="ButtonColor.Danger" Outline="true" @onclick="_ => Store.RemoveStreamsReadOption(optionIndex)" Disabled="loading"><Icon Name="IconName.Dash"></Icon></Button>
                    </div>
                }
                <div class="d-flex justify-content-end">
                    @if (loading) 
                    {
                        <div class="loading me-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    <div class="form-check me-3 pt-2">
                        <input class="form-check-input" type="checkbox" checked="@keepTimeRange" @onchange="_ => Store.ToggleKeepTimeRange()" id="keep-time-frame">
                        <label class="form-check-label" for="keep-time-frame">
                            Keep current time range
                        </label>
                    </div>
                    <Button Color="ButtonColor.Light" Outline="true" @onclick="_ => Store.AddStreamsReadOption()" Disabled="loading"><Icon Name="IconName.Plus"></Icon></Button>
                </div>
            </div>
        }
    </div>
    <div @ref="timeline" class="timeline pt-5"></div>
    @if (selectedCloudEvents.Any())
    {
        <div class="selected-events-grid">
            @foreach (var cloudEvent in selectedCloudEvents)
            {
                <div class="card">
                    <div class="card-header text-primary">
                        @cloudEvent.Time?.LocalDateTime.ToString("R") <Button Color="ButtonColor.Light" Outline="true" Size="ButtonSize.Small" @onclick="_ => DeselectCloudEvent(cloudEvent)" Class="float-end"><Icon Name="IconName.X" /></Button>
                    </div>
                    <div class="card-body">
                        <TimelineCloudEventDetails CloudEvent="cloudEvent" OnPartitionClick="Store.TryAddPartitionReadOption"/>
                    </div>
                </div>
            }
        </div>
    }
</div>

<div class="cloud-event-tooltip card @cloudEventTooltipDirection" style="@(cloudEventTooltipStyle)">
    @if (cloudEvent != null)
    {
        <div class="card-header text-primary">
            @cloudEvent.Time?.LocalDateTime.ToString("R")
        </div>
        <div class="card-body">
            <TimelineCloudEventDetails CloudEvent="cloudEvent" />
        </div>
    }
</div>

<div class="label-tooltip" style="@(labelTooltipStyle)">
    @label
</div>

@code {
    /// <summary>
    /// A reference to the DOM element of the timeline
    /// </summary>
    private ElementReference timeline;
    /// <summary>
    /// A Dotnet reference of the current component, used for interop
    /// </summary>
    private DotNetObjectReference<Timeline>? dotnetReference = null;
    /// <summary>
    /// Indicates whether or not the component has been disposed
    /// </summary>
    private bool disposed = false;
    /// <summary>
    /// The list of <see cref="StreamReadOptions"/> used to populate <see cref="TimelineLane"/>s
    /// </summary>
    private IEnumerable<StreamReadOptions>? streamsReadOptions = null;
    /// <summary>
    /// The indicator of the data is being gathered
    /// </summary>
    private bool loading = false;
    /// <summary>
    /// Indicates whether to keep the previous chart's time frame or to redraw it with the new data boundaries
    /// </summary>
    private bool keepTimeRange = false;
    /// <summary>
    /// The style applied to the cloud event tooltip
    /// </summary>
    private string cloudEventTooltipStyle = "";
    /// <summary>
    /// The direction of the cloud event tooltip
    /// </summary>
    private string cloudEventTooltipDirection = "right";
    /// <summary>
    /// The cloud event displayed in the tooltip
    /// </summary>
    private CloudEvent? cloudEvent = null;
    /// <summary>
    /// The style applied to the label tooltip
    /// </summary>
    private string labelTooltipStyle = "";
    /// <summary>
    /// The label displayed in the tooltip
    /// </summary>
    private string label = "";
    /// <summary>
    /// The list of selected cloud events
    /// </summary>
    private List<CloudEvent> selectedCloudEvents = new List<CloudEvent>();

    /// <summary>
    /// An instance of the <see cref="EventDropsInterop" /> service scope to the lifetime of the component
    /// </summary>
    private EventDropsInterop? _eventDropsInterop;
    private EventDropsInterop? eventDropsInterop
    {
        get
        {
            if (this._eventDropsInterop != null) return this._eventDropsInterop;
            this._eventDropsInterop = ActivatorUtilities.CreateInstance<EventDropsInterop>(this.ServiceProvider);
            return this._eventDropsInterop;
        }
    }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);
        this.Store.StreamsReadOptions.Subscribe(streamsReadOptions => this.OnStateChanged(cmp => cmp.streamsReadOptions = streamsReadOptions), token: this.CancellationTokenSource.Token);
        this.Store.Loading.Subscribe(processing => this.OnStateChanged(cmp => cmp.loading = processing), token: this.CancellationTokenSource.Token);
        this.Store.KeepTimeRange.Subscribe(keepTimeRange => this.OnStateChanged(cmp => cmp.keepTimeRange = keepTimeRange), token: this.CancellationTokenSource.Token);
        this.Store.TimelineLanes.SubscribeAsync(async timelineLanes => await this.RenderTimelineAsync(timelineLanes), null!, null!, cancellationToken: this.CancellationTokenSource.Token);
    }

    /// <inheritdoc/>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.dotnetReference = DotNetObjectReference.Create(this);
            await Store.GatherCloudEventsAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Renders the timeline with the provided <see cref="TimelineLane"/>s
    /// </summary>
    /// <param name="timelineLanes">The <see cref="TimelineLane"/>s to render</param>
    private async Task RenderTimelineAsync(IEnumerable<TimelineLane> timelineLanes)
    {
        if (this.eventDropsInterop == null || timelineLanes == null || !timelineLanes.Any())
        {
            return;
        }
        var timeEntries = timelineLanes
            .SelectMany(lane => lane.Data)
            .Where(data => data.Time != null)
            .Select(data => data.Time!.Value)
            .OrderBy(time => time);
        if (!timeEntries.Any())
        {
            return;
        }
        var start = timeEntries.First();
        var end = timeEntries.Last();
        var delta = end.Subtract(start).TotalMilliseconds;
        if (delta == 0)
        {
            delta = 20;
        }
        var margin = delta / 20;
        await this.eventDropsInterop.RenderTimelineAsync(this.timeline, this.dotnetReference, timelineLanes, start, end.AddMilliseconds(margin), this.keepTimeRange);
    }

    /// <summary>
    /// Patches the <see cref="Timeline"/>'s fields after a <see cref="TimelineStore"/>'s change
    /// </summary>
    /// <param name="patch">The patch to apply</param>
    private void OnStateChanged(Action<Timeline> patch)
    {
        patch(this);
        this.StateHasChanged();
    }

    /// <summary>
    /// Shows the tooltip for the provided <see cref="CloudEvent"/>
    /// </summary>
    /// <param name="cloudEvent">The <see cref="CloudEvent"/> to display</param>
    /// <param name="x">The position of the tooltip on the x-axis</param>
    /// <param name="y">The position of the tooltip on the y-axis</param>
    /// <param name="direction">If the tooltip should be displayed on the right or the left of the cursor</param>
    [JSInvokable]
    public void ShowCloudEventTooltipOnMouseOver(CloudEvent cloudEvent, int x, int y, string direction)
    {
        this.cloudEvent = cloudEvent;
        this.cloudEventTooltipDirection = direction;
        string left;
        if (direction == "right")
        {
            left = $"calc({x}px - 1rem)";
        }
        else
        {
            left = $"calc({x - 500}px + 1rem)";
        }
        this.cloudEventTooltipStyle = $"opacity: 1; left: {left}; top: calc({y}px + 1rem)";
        this.StateHasChanged();
    }

    /// <summary>
    /// Hides the cloud event tooltip
    /// </summary>
    [JSInvokable]
    public void HideCloudEventTooltipOnMouseOut()
    {
        this.cloudEventTooltipStyle = "opacity: 0;";
        this.cloudEvent = null;
        this.StateHasChanged();
    }

    /// <summary>
    /// Shows the tool
    /// </summary>
    /// <param name="label"></param>
    /// <param name="x">The position of the tooltip on the x-axis</param>
    /// <param name="y">The position of the tooltip on the y-axis</param>
    [JSInvokable]
    public void ShowLabelTooltipOnMouseOver(string label, int x, int y)
    {
        this.label = label;
        this.labelTooltipStyle = $"opacity: 1; top: calc({y}px - 40px)";
        this.StateHasChanged();
    }

    [JSInvokable]
    public void HideLabelTooltipOnMouseOut()
    {
        this.labelTooltipStyle = "opacity: 0;";
        this.label = "";
        this.StateHasChanged();
    }

    /// <summary>
    /// Adds the clicked <see cref="CloudEvent"/> to the selection
    /// </summary>
    /// <param name="cloudEvent">The <see cref="CloudEvent"/> to add</param>
    [JSInvokable]
    public void SelectCloudEventOnClick(CloudEvent cloudEvent)
    {
        this.selectedCloudEvents.Add(cloudEvent);
        this.StateHasChanged();
    }

    /// <summary>
    /// Removes the <see cref="CloudEvent"/> at the provided index for the selection
    /// </summary>
    /// <param name="cloudEvent">The <see cref="CloudEvent"/> to remove</param>
    private void DeselectCloudEvent(CloudEvent cloudEvent)
    {
        this.selectedCloudEvents.Remove(cloudEvent);
    }

    /// <inheritdoc/>
    public async ValueTask DisposeAsync()
    {
        if (!this.disposed)
        {
            if(this._eventDropsInterop != null)
            {
                await this._eventDropsInterop.DisposeAsync();
                this._eventDropsInterop = null;
            }
            if (this.dotnetReference != null)
            {
                this.dotnetReference.Dispose();
                this.dotnetReference = null;
            }
            this.disposed = true;
        }
    }

}
