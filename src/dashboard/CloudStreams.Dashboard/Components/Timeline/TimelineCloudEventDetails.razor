@namespace CloudStreams.Dashboard.Components
@inject Neuroglia.Serialization.IJsonSerializer JsonSerializer

@if (cloudEvent != null)
{
    <table class="table table-sm table-striped">
        <tbody>
            <tr>
                <td>Id</td>
                <td>@cloudEvent.Id</td>
            </tr>
            <tr>
                <td>Source</td>
                <td>
                    <a href="#" @onclick="async (_) => await OnPartitionClick.InvokeAsync(new PartitionReference(CloudEventPartitionType.BySource, cloudEvent.Source.OriginalString))" @onclick:preventDefault @onclick:stopPropagation>
                        @(cloudEvent.Source.OriginalString)
                    </a>
                </td>
            </tr>
            <tr>
                <td>Type</td>
                <td>
                    <a href="#" @onclick="async (_) => await OnPartitionClick.InvokeAsync(new PartitionReference(CloudEventPartitionType.ByType, cloudEvent.Type))" @onclick:preventDefault @onclick:stopPropagation>
                        @cloudEvent.Type
                    </a>
                </td>
            </tr>
            @if (!string.IsNullOrWhiteSpace(cloudEvent.Subject))
            {
                <tr>
                    <td>Subject</td>
                    <td>
                        <a href="#" @onclick="async (_) => await OnPartitionClick.InvokeAsync(new PartitionReference(CloudEventPartitionType.BySubject, cloudEvent.Subject))" @onclick:preventDefault @onclick:stopPropagation>
                            @cloudEvent.Subject
                        </a>
                    </td>
                </tr>
            }
            <tr>
                <td>Spec. Version</td>
                <td>@cloudEvent.SpecVersion</td>
            </tr>
            @if (cloudEvent.DataSchema != null)
            {
                <tr>
                    <td>Data Schema</td>
                    <td>@cloudEvent.DataSchema</td>
                </tr>
            }
            @if (!string.IsNullOrWhiteSpace(cloudEvent.DataContentType))
            {
                <tr>
                    <td>Data Content Type</td>
                    <td>@cloudEvent.DataContentType</td>
                </tr>
            }
            @if (cloudEvent != null && cloudEvent.ExtensionAttributes?.Any() == true)
            {
                @foreach (var attr in cloudEvent.ExtensionAttributes)
                {
                    <tr>
                        <td>@attr.Key</td>
                        <td>@attr.Value</td>
                    </tr>
                }
            }
        </tbody>
    </table>
    @if (cloudEvent!.Data != null)
    {
        <pre>
            @JsonSerializer.SerializeToText(cloudEvent.Data)
        </pre>
    }
}
@code {
    bool isDirty = false;
    CloudEvent? cloudEvent;
    [Parameter] public CloudEvent? CloudEvent { get; set; }

    [Parameter] public EventCallback<PartitionReference> OnPartitionClick { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (this.cloudEvent != this.CloudEvent)
        {
            this.cloudEvent = this.CloudEvent;
            this.isDirty = true;
        }
    }

    protected override bool ShouldRender()
    {
        if (!this.isDirty) return false;
        this.isDirty = false;
        return true;
    }
}