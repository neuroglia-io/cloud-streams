@namespace CloudStreams.Dashboard.Pages.Brokers.List
@page "/brokers"
@inherits ResourceManagementComponent<Broker>

<ApplicationTitle>Brokers</ApplicationTitle>

<div class="table-container">
    @if (Loading)
    {
        <div class="loading">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    <div class="d-flex flex-row justify-content-between align-items-center">
        <h4>Brokers</h4>
        <span>@(Resources?.Count ?? 0) items</span>
        <div class="d-flex">
            <input type="search" class="form-control rounded my-2 me-2" placeholder="Search" value="@SearchTerm" @oninput="OnSearchInput" />
            <div class="dropdown d-flex align-content-center p-1">
                <button class="btn btn-sm" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" title="" @onclick:stopPropagation="true"><i class="bi bi-three-dots-vertical"></i></button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item @(SelectedResourceNames.Count == 0 ? "text-mute" : "text-danger")" href="#" @onclick="async _ => await (SelectedResourceNames.Count == 0 ?  Task.CompletedTask : OnDeleteSelectedResourcesAsync())" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Trash" /> Delete selected</a></li>
                </ul>
            </div>
        </div>
    </div>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th class="sticky-header text-start">Name</th>
                <th class="sticky-header text-center">Created At</th>
                <th class="sticky-header text-center">Generation</th>
                <th class="sticky-header text-center">Retry Policy</th>
                <th class="sticky-header text-center">Circuit Breaker</th>
                <th class="sticky-header text-center">Health Status</th>
                <th class="sticky-header text-end"></th>
                <th class="sticky-header text-center align-middle">
                    <input @ref="CheckboxAll" type="checkbox" @onclick="(_) => Store.ToggleResourceSelection()" @onclick:preventDefault="true" @onclick:stopPropagation="true" />
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Resources != null && Resources.Any())
            {
                <Virtualize Context="resource" Items="@Resources">
                    <tr @onclick="async _ => await OnShowResourceDetailsAsync(resource)" class="cursor-pointer">
                        <td class="text-start">@resource.Metadata.Name</td>
                        <td class="text-center">@resource.Metadata.CreationTimestamp.ToString()</td>
                        <td class="text-center">@resource.Metadata.Generation</td>
                        <td class="text-center">@(resource.Spec?.Dispatch?.RetryPolicy == null ? "no" : "yes")</td>
                        <td class="text-center">@(resource.Spec?.Dispatch?.RetryPolicy?.CircuitBreaker == null ? "no" : "yes")</td>
                        <td class="text-center"><span class="bi-circle-fill @GetCssClassFor(resource.Status?.HealthStatus)"></span></td>
                        <td class="text-end">
                            <div class="dropdown">
                                <button class="btn btn-sm" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" title="" @onclick:stopPropagation="true"><i class="bi bi-three-dots-vertical"></i></button>
                                <ul class="dropdown-menu">
                                    <li>
                                        <button class="dropdown-item" title="Edit the @(typeof(Broker).Name.ToLower()) '@resource.Metadata.Name'" @onclick="async _ => await OnShowResourceEditorAsync(resource)" @onclick:preventDefault @onclick:stopPropagation><Icon Name="IconName.Pencil" /> Edit</button>
                                    </li>
                                    <li>
                                        <button class="dropdown-item text-danger" title="Delete the @(typeof(Broker).Name.ToLower()) '@resource.Metadata.Name'" @onclick="async _ => await OnDeleteResourceAsync(resource)" @onclick:preventDefault @onclick:stopPropagation><Icon Name="IconName.Trash" /> Delete</button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                        <td class="text-center align-middle">
                            <input type="checkbox" checked="@SelectedResourceNames.Contains(resource.GetName())" @onclick="(_) => Store.ToggleResourceSelection(resource.GetName())" @onclick:preventDefault="true" @onclick:stopPropagation="true" />
                        </td>
                    </tr>
                </Virtualize>
            }
        </tbody>
    </table>
</div>

<Button Outline="true" Color="ButtonColor.Primary" @onclick="async _ => await OnShowResourceEditorAsync()"><Icon Name="IconName.Plus" /></Button>

<Offcanvas @ref="DetailsOffCanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex flex-column" />

<Offcanvas @ref="EditorOffCanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex flex-column" />

<ConfirmDialog @ref="Dialog" />

@code {

    string GetCssClassFor(string? healthStatus)
    {
        return healthStatus switch
        {
            HealthStatus.Degraded => "text-warning",
            HealthStatus.Healthy => "text-primary",
            HealthStatus.Unhealthy => "text-danger",
            _ => "text-secondary"
        };
    }

}