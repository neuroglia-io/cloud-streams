@namespace CloudStreams.Dashboard.Pages.Subscriptions.List
@page "/subscriptions"
@using CloudStreams.Core.Api.Client.Services;
@using Json.Patch;
@using Json.Pointer;
@using Neuroglia.Data
@inherits ResourceManagementComponent<Subscription>
@inject ICloudStreamsCoreApiClient ApiClient;

<ApplicationTitle>Subscriptions</ApplicationTitle>

<div class="table-container">
    @if (Loading)
    {
        <div class="loading">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    <div class="d-flex flex-row justify-content-between align-items-center">
        <h4>Subscriptions</h4>
        <span>@(Resources?.Count ?? 0) items</span>
        <div class="d-flex">
            <input type="search" class="form-control rounded my-2 me-2" placeholder="Search" value="@SearchTerm" @oninput="OnSearchInput" />
            <div class="dropdown d-flex align-content-center p-1">
                <button class="btn btn-sm" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" title="" @onclick:stopPropagation="true"><i class="bi bi-three-dots-vertical"></i></button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item @(SelectedResourceNames.Count == 0 ? "text-mute" : "")" href="#" @onclick="async _ => await (SelectedResourceNames.Count == 0 ?  Task.CompletedTask : OnExportSelectedResourcesAsync())" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Download" /> Export selected</a></li>
                    <li><a class="dropdown-item @(SelectedResourceNames.Count == 0 ? "text-mute" : "text-danger")" href="#" @onclick="async _ => await (SelectedResourceNames.Count == 0 ?  Task.CompletedTask : OnDeleteSelectedResourcesAsync())" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Trash" /> Delete selected</a></li>
                </ul>
            </div>
        </div>
    </div>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th class="sticky-header">Name</th>
                <th class="sticky-header text-center">Created At</th>
                <th class="sticky-header text-center">Status</th>
                <th class="sticky-header text-center">Subscriber</th>
                <th class="sticky-header text-center">Subscriber Status</th>
                <th class="sticky-header text-center">Rate Limit</th>
                <th class="sticky-header text-center">Filter</th>
                <th class="sticky-header text-center">Stream</th>
                <th class="sticky-header text-center">Mutate</th>
                <th class="sticky-header text-center">Offset</th>
                <th class="sticky-header"></th>
                <th class="sticky-header text-center align-middle">
                    <input @ref="CheckboxAll" type="checkbox" @onclick="(_) => Store.ToggleResourceSelection()" @onclick:preventDefault="true" @onclick:stopPropagation="true" />
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Resources != null && Resources.Any())
            {
                <Virtualize Context="resource" Items="@Resources">
                    <tr @onclick="async _ => await OnShowResourceDetailsAsync(resource)" class="cursor-pointer">
                        <td>@resource.Metadata.Name</td>
                        <td class="text-center">@resource.Metadata.CreationTimestamp?.ToString("R")</td>
                        <td class="text-center">
                            @switch (resource.Status?.Phase)
                            {
                                case SubscriptionStatusPhase.Active:
                                    <span class="badge text-dark bg-primary">active</span>
                                    break;
                                case SubscriptionStatusPhase.Inactive:
                                    <span class="badge bg-secondary">inactive</span>
                                    break;
                            }
                            @if(resource.Status?.Stream?.Fault != null)
                            {
                                <span class="badge text-dark bg-danger ms-1 cursor-pointer" title="@resource.Status.Stream.Fault.ToString()" @onclick="async e => await OnResumeSubscriptionAsync(resource)" @onclick:preventDefault="true" @onclick:stopPropagation="true">faulted</span>
                            }
                        </td>
                        <td class="text-center">
                            <a href="@resource.Spec.Subscriber.Uri" target="_blank">@resource.Spec.Subscriber.Uri</a>
                        </td>
                        <td class="text-center">
                            <span class="badge @GetSubscriberStatusClass(resource)">
                                @((resource.Status?.Subscriber?.State ?? SubscriberState.Unknown).ToString().ToLower())
                            </span>
                        </td>
                        <td class="text-center">@(resource.Spec.Subscriber.RateLimit.HasValue ? resource.Spec.Subscriber.RateLimit.Value.ToString() : "-")</td>
                        <td class="text-center">
                            @if (resource.Spec?.Filter == null)
                            {
                                <span class="badge bg-secondary">no</span>
                            }
                            else
                            {
                                <span class="badge text-dark bg-primary">yes</span>
                            }
                        </td>
                        <td class="text-center">
                            @if (resource.Spec?.Stream == null)
                            {
                                <span class="badge bg-secondary">no</span>
                            }
                            else
                            {
                                <span class="badge text-dark bg-primary">yes</span>
                            }
                        </td>
                        <td class="text-center">
                            @if (resource.Spec?.Mutation == null)
                            {
                                <span class="badge bg-secondary">no</span>
                            }
                            else
                            {
                                <span class="badge text-dark bg-primary">yes</span>
                            }
                        </td>
                        <td class="text-center">@(resource.Spec?.Stream == null ? "-" : resource.Status == null || resource.Status?.Stream == null ? "" : resource.Status?.Stream?.AckedOffset)</td>
                        <td class="text-end">
                            <div class="dropdown">
                                <button class="btn btn-sm" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" title="" @onclick:stopPropagation="true"><i class="bi bi-three-dots-vertical"></i></button>
                                <ul class="dropdown-menu">
                                    <li>
                                        <button class="dropdown-item" title="Replay all events matching @(typeof(Subscription).Name.ToLower()) '@resource.Metadata.Name', which implicitly enables streaming." @onclick="async _ => await OnRestartSubscriptionAsync(resource)" @onclick:preventDefault @onclick:stopPropagation><Icon Name="IconName.ArrowClockwise" /> Replay</button>
                                    </li>
                                    <li>
                                        <a href="@($"/api/resources/v1/subscriptions/{resource.Metadata.Name}/export")" target="_blank" class="dropdown-item" title="Export the @(typeof(Subscription).Name.ToLower()) '@resource.Metadata.Name' definition" @onclick:stopPropagation><Icon Name="IconName.Download" /> Export</a>
                                    </li>
                                    <li>
                                        <button class="dropdown-item" title="Edit the @(typeof(Subscription).Name.ToLower()) '@resource.Metadata.Name'" @onclick="async _ => await OnShowResourceEditorAsync(resource)" @onclick:preventDefault @onclick:stopPropagation><Icon Name="IconName.Pencil" /> Edit</button>
                                    </li>
                                    <li>
                                        <button class="dropdown-item text-danger" title="Delete the @(typeof(Subscription).Name.ToLower()) '@resource.Metadata.Name'" @onclick="async _ => await OnDeleteResourceAsync(resource)" @onclick:preventDefault @onclick:stopPropagation><Icon Name="IconName.Trash" /> Delete</button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                        <td class="text-center align-middle">
                            <input type="checkbox" checked="@SelectedResourceNames.Contains(resource.GetName())" @onclick="(_) => Store.ToggleResourceSelection(resource.GetName())" @onclick:preventDefault="true" @onclick:stopPropagation="true" />
                        </td>
                    </tr>
                </Virtualize>
            }
        </tbody>
    </table>
</div>

<Button Outline="true" Color="ButtonColor.Primary" @onclick="async _ => await OnShowResourceEditorAsync()"><Icon Name="IconName.Plus" /></Button>

<Offcanvas @ref="DetailsOffCanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex flex-column" />

<Offcanvas @ref="EditorOffCanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex flex-column" />

<ConfirmDialog @ref="Dialog" />

@code
{

    Task OnResumeSubscriptionAsync(Subscription subscription)
    {
        var patch = new Patch(PatchType.JsonPatch, new JsonPatch(PatchOperation.Remove(JsonPointer.Create<Subscription>(s => s.Status!.Stream!.Fault!).ToCamelCase())));
        return this.ApiClient.Resources.Subscriptions.PatchStatusAsync(patch, subscription.GetName(), subscription.GetNamespace());
    }

    async Task OnRestartSubscriptionAsync(Subscription subscription)
    {
        var offset = subscription.Spec.Stream?.Offset;
        if (offset == StreamPosition.StartOfStream) offset = StreamPosition.EndOfStream;
        else offset = StreamPosition.StartOfStream;
        var streamNode = this.Serializer.SerializeToNode(new CloudEventStream() { Offset = offset });
        var patch = new Patch(PatchType.JsonPatch, new JsonPatch(subscription.Spec.Stream == null
            ? PatchOperation.Add(JsonPointer.Create<Subscription>(s => s.Spec.Stream!).ToCamelCase(), streamNode)
            : PatchOperation.Replace(JsonPointer.Create<Subscription>(s => s.Spec.Stream!).ToCamelCase(), streamNode)));
        subscription = await this.ApiClient.Resources.Subscriptions.PatchAsync(patch, subscription.GetName(), subscription.GetNamespace());
        if (subscription.Spec.Stream?.Offset == StreamPosition.EndOfStream)
        {
            patch = new Patch(PatchType.JsonPatch, new JsonPatch(PatchOperation.Replace(JsonPointer.Create<Subscription>(s => s.Spec.Stream!).ToCamelCase(), this.Serializer.SerializeToNode(new CloudEventStream() { Offset = StreamPosition.StartOfStream }))));
            await this.ApiClient.Resources.Subscriptions.PatchAsync(patch, subscription.GetName(), subscription.GetNamespace());
        }
    }

    string GetSubscriberStatusClass(Subscription subscription) => subscription?.Status?.Subscriber?.State switch
    {
        SubscriberState.Unknown => "bg-secondary",
        SubscriberState.Reachable => "text-dark bg-primary",
        SubscriberState.Unreachable => "bg-danger",
        _ => "bg-secondary"
    };
}