@namespace CloudStreams.Dashboard.Pages.CloudEvents.List
@page "/events"
@using CloudStreams.Dashboard.Pages.CloudEvents.List
@using System.Reactive.Linq
@using CloudStreams.Dashboard.StateManagement
@inherits StatefulComponent<CloudEventListStore, CloudEventListState>

<ApplicationTitle>Events</ApplicationTitle>

<ReadOptionsForm @ref="readOptionForm" OnChange="Store.SetReadOptions" OnMaxLengthChange="Store.SetTotalCount"></ReadOptionsForm>

<div class="table-container">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th class="sticky-header">Sequence</th>
                <th class="sticky-header">Id</th>
                <th class="sticky-header">Time</th>
                <th class="sticky-header">Source</th>
                <th class="sticky-header">Type</th>
                <th class="sticky-header">Subject</th>
                <th class="sticky-header">Data Schema</th>
                <th class="sticky-header">Content Type</th>
            </tr>
        </thead>
        <tbody>
            <Virtualize @ref="virtualize" Context="e" ItemsProvider="@Store.ProvideCloudEvents" ItemSize="61">
                <ItemContent>
                    <tr @onclick="async _ => await OnShowCloudEventOffcanvasAsync(e)" class="cursor-pointer">
                        <td>
                            <div class="contained">
                                @(e.ExtensionAttributes?[CloudEventExtensionAttributes.Sequence] ?? "")
                            </div>
                        </td>
                        <td>
                            <div class="contained">
                                @e.Id
                            </div>
                        </td>
                        <td>
                            <div class="contained">
                                @(e.Time == null ? "" : e.Time!.Value.LocalDateTime.ToString("R"))
                            </div>
                        </td>
                        <td>
                            <div class="contained">
                                <a href="#by-source" @onclick:preventDefault @onclick:stopPropagation @onclick="_ => OnReadCloudEventPartitionClicked(CloudEventPartitionType.BySource, e.Source.ToString())">
                                    @e.Source
                                </a>
                            </div>
                        </td>
                        <td>
                            <div class="contained">
                                <a href="#by-type" @onclick:preventDefault @onclick:stopPropagation @onclick="_ => OnReadCloudEventPartitionClicked(CloudEventPartitionType.ByType, e.Type)">
                                    @e.Type
                                </a>
                            </div>
                        </td>
                        <td>
                            @if (!string.IsNullOrWhiteSpace(e.Subject))
                            {
                                <div class="contained">
                                    <a href="#by-subject" @onclick:preventDefault @onclick:stopPropagation @onclick="_ => OnReadCloudEventPartitionClicked(CloudEventPartitionType.BySubject, e.Subject)">
                                        @e.Subject
                                    </a>
                                </div>
                            }
                        </td>
                        <td>
                            @if (e.DataSchema != null)
                            {
                                <div class="contained">
                                    <a href="@e.DataSchema" target="_blank">@e.DataSchema</a>
                                </div>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrWhiteSpace(e.DataContentType))
                            {
                                <div class="contained">
                                    <span class="badge rounded-pill text-bg-primary bg-primary-subtle">@e.DataContentType</span>
                                </div>
                            }
                        </td>
                    </tr>
                </ItemContent>
                <Placeholder>
                    <tr class="row-placeholder">
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                </Placeholder>
            </Virtualize>
        </tbody>
    </table>
</div>

<Offcanvas @ref="offcanvas" Size="OffcanvasSize.Large" ReadOnly="true" UseStaticBackdrop="false" />

@code {

    List<CloudEvent> events = new();
    Offcanvas? offcanvas;
    ReadOptionsForm? readOptionForm;
    Virtualize<CloudEvent>? virtualize;
    bool readOptionsInitialized = false;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);
        Observable.CombineLatest<StreamReadOptions, ulong?, bool>(
            this.Store.ReadOptions,
            this.Store.TotalCount,
            (_, _) => true
        )
        .Throttle(TimeSpan.FromMilliseconds(300))
        .SubscribeAsync(this.OnReadOptionChangedAsync, null, null, cancellationToken: this.CancellationTokenSource.Token);
    }

    /// <summary>
    /// Patches the <see cref="View"/>'s fields after a <see cref="CloudEventListStore"/>'s change
    /// </summary>
    /// <param name="patch">The patch to apply</param>
    private void OnStateChanged(Action<View> patch)
    {
        patch(this);
        this.StateHasChanged();
    }

    /// <summary>
    /// Refresh the virtual list on <see cref="StreamReadOptions" />'s or total count's changes
    /// </summary>
    private async Task OnReadOptionChangedAsync(bool _)
    {
        if (!this.readOptionsInitialized)
        {
            this.readOptionsInitialized = true;
            return;
        }
        if (this.virtualize != null)
        {
            await this.virtualize.RefreshDataAsync();
        }
        this.StateHasChanged();
    }

    /// <summary>
    /// Sets the <see cref="ReadOptionsForm"/>'s value when a partition is clicked in the table
    /// </summary>
    /// <param name="type">The type of the partition</param>
    /// <param name="id">The id of the partition</param>
    private void OnReadCloudEventPartitionClicked(CloudEventPartitionType type, string id)
    {
        if (this.readOptionForm != null) this.readOptionForm.SetPartition(type, id);
    }

    /// <summary>
    /// Shows the <see cref="CloudEventDetails"/>
    /// </summary>
    /// <param name="cloudEvent">The <see cref="CloudEvent"/> to show the details of</param>
    Task OnShowCloudEventOffcanvasAsync(CloudEvent cloudEvent)
    {
        if (this.offcanvas == null) return Task.CompletedTask;
        var parameters = new Dictionary<string, object>();
        parameters.Add("ReadOnly", true);
        parameters.Add("CloudEvent", cloudEvent);
        return this.offcanvas.ShowAsync<CloudEventDetails>(title: "Cloud Event Details", parameters: parameters);
    }

}