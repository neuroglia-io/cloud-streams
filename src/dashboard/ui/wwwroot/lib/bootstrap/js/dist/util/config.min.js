/**
 * Minified by jsDelivr using Terser v5.15.1.
 * Original file: /npm/bootstrap@5.3.0-alpha1/js/dist/util/config.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
/*!
  * Bootstrap config.js v5.3.0-alpha1 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("./index.js"),require("../dom/manipulator.js")):"function"==typeof define&&define.amd?define(["./index","../dom/manipulator"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).Config=t(e.Index,e.Manipulator)}(this,(function(e,t){"use strict";return class{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(o,n){const r=e.isElement(n)?t.getDataAttribute(n,"config"):{};return{...this.constructor.Default,..."object"==typeof r?r:{},...e.isElement(n)?t.getDataAttributes(n):{},..."object"==typeof o?o:{}}}_typeCheckConfig(t,o=this.constructor.DefaultType){for(const[n,r]of Object.entries(o)){const o=t[n],i=e.isElement(o)?"element":e.toType(o);if(!new RegExp(r).test(i))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${n}" provided type "${i}" but expected type "${r}".`)}}}}));
//# sourceMappingURL=/sm/9e96346503bfc1d4e061a9efa2613506a57fcae16def2d54a838466ae4ff2f62.map