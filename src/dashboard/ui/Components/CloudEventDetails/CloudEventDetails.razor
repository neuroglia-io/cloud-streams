@namespace CloudStreams.Dashboard.Components
@using System.Text.Json;

<div class="container-fluid">
    <div class="row">
        <h5>Context Attributes</h5>
        <table class="table table-striped mb-3">
            <tbody>
                <tr>
                    <td>Id</td>
                    <td>@cloudEvent?.Id</td>
                </tr>
                @if (readOnly)
                {
                    <tr>
                        <td>Time</td>
                        <td>@cloudEvent?.Time?.LocalDateTime</td>
                    </tr>
                }
                <tr>
                    <td>Source</td>
                    <td>@cloudEvent?.Source</td>
                </tr>
                <tr>
                    <td>Type</td>
                    <td>@cloudEvent?.Type</td>
                </tr>
                <tr>
                    <td>Subject</td>
                    <td>@cloudEvent?.Subject</td>
                </tr>
                <tr>
                    <td>Data Schema</td>
                    <td>@cloudEvent?.DataSchema</td>
                </tr>
                <tr>
                    <td>Data Content Type</td>
                    <td>@cloudEvent?.DataContentType</td>
                </tr>
            </tbody>
        </table>
        @if (cloudEvent != null && cloudEvent.ExtensionAttributes?.Any() == true)
        {
            <h5>Extension Attributes</h5>
            <table class="table table-striped mb-3">
                <tbody>
                    @foreach (var attr in cloudEvent.ExtensionAttributes)
                    {
                        <tr>
                            <td>@attr.Key.ToPascalCase()</td>
                            <td>@attr.Value</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="row vh-30">
        <h5>Data</h5>
        <pre class="h-100">@(JsonSerializer.Serialize(cloudEvent?.Data, new JsonSerializerOptions() { WriteIndented = true }))</pre>
    </div>
</div>

@code {

    CloudEvent? cloudEvent;
    /// <summary>
    /// Gets/sets the cloud event to display details about
    /// </summary>
    [Parameter] public CloudEvent? CloudEvent { get; set; }

    bool readOnly;
    /// <summary>
    /// Gets/sets a boolean indicating whether or not the modal is in read-only mode
    /// </summary>
    [Parameter] public bool ReadOnly { get; set; }

    /// <inheritdoc/>
    protected override Task OnParametersSetAsync()
    {
        if(this.cloudEvent != this.CloudEvent) this.cloudEvent = this.CloudEvent;
        if(this.readOnly != this.ReadOnly) this.readOnly = this.ReadOnly;
        return base.OnParametersSetAsync();
    }

}
