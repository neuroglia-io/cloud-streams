@namespace CloudStreams.Dashboard.Components

<div id="partition-filter" class="input-group mb-3">
    <div class="form-floating">
        <select id="partitionType" class="form-select" name="partitionType" @onchange="e => OnPropertyChanged(filter => filter.partitionType = string.IsNullOrWhiteSpace((string?)e.Value) ? null : Enum.Parse<CloudEventPartitionType>((string)e.Value!))">
            <option value="" selected="@(partitionType == null)"></option>
            @foreach (var value in Enum.GetValues<CloudEventPartitionType>())
            {
                <option value="@value" selected="@(partitionType == value)">@value</option>
            }
        </select>
        <label for="partitionType">Partition Type</label>
    </div>
    <div class="form-floating">
        <input id="partitionId" type="text" class="form-control" value="@partitionId" list="partitions" autocomplete="on" @onchange="e => OnPropertyChanged(filter => filter.partitionId = (string?)e.Value)" />
        <datalist id="partitions">
            @if (Partitions != null)
            {
                foreach (var partition in Partitions)
                {
                    <option value="@partition.Id"></option>
                }
            }
        </datalist>
        <label for="partitionId">Partition Id</label>
    </div>
    <button class="btn btn-outline-secondary" type="button" @onclick="_ => OnPropertyChanged(filter => filter.partitionType= null)"><span class="bi bi-x-circle"></span></button>
</div>

@code {
    /// <summary>
    /// The selected partition type value
    /// </summary>
    private CloudEventPartitionType? partitionType = null;
    /// <summary>
    /// The selected partition id
    /// </summary>
    private string? partitionId = null;
    /// <summary>
    /// The list of existing partitions
    /// </summary>
    [Parameter] public List<CloudEventPartitionMetadata>? Partitions { get; set; }
    /// <summary>
    /// The partition provided by the parent component
    /// </summary>
    [Parameter] public CloudEventPartitionRef? Partition { get; set; }
    /// <summary>
    /// The partition emitted by the filter after user interactions
    /// </summary>
    [Parameter] public EventCallback<CloudEventPartitionRef?> OnChange { get; set; }

    /// <inheritdoc/>
    protected override void OnParametersSet()
    {
        if (this.Partition == null)
        {
            this.partitionType = null;
            this.partitionId = null;
            return;
        }
        if (this.Partition.Type != this.partitionType)
        {
            this.partitionType = this.Partition.Type;
        }
        if (this.Partition.Id != this.partitionId)
        {
            this.partitionId = this.Partition.Id;
        }
    }

    /// <summary>
    /// Patches the current filter and emit the new value
    /// </summary>
    /// <param name="patch"></param>
    private void OnPropertyChanged(Action<PartitionFilter> patch)
    {
        patch(this);
        if (!this.partitionType.HasValue)
        {
            this.OnChange.InvokeAsync(null);
            return;
        }
        var partition = new CloudEventPartitionRef() {
            Type = this.partitionType.Value
        };
        if (!string.IsNullOrWhiteSpace(this.partitionId)) partition.Id = this.partitionId;
        this.OnChange.InvokeAsync(partition);
        this.StateHasChanged();
    }
}
