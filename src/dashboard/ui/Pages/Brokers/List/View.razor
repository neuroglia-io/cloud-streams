@namespace CloudStreams.Dashboard.Pages.Brokers.List
@page "/brokers"
@using System.Reactive.Linq
@using CloudStreams.Dashboard.StateManagement
@inherits ResourceManagementComponent<Broker>
@inject ICloudStreamsApiClient CloudStreamsApi

<ApplicationTitle>Brokers</ApplicationTitle>

<Table Items="brokers"
    AutoGenerateColumns="false"
    TableClass="table table-striped table-hover">
    <Columns>
        <Column TData="Broker"
                ValueProvider="b => b.Metadata.Name">
            <HeaderTemplate>Name</HeaderTemplate>
        </Column>
        <Column TData="Broker"
                ValueProvider="b => b.Spec.Stream == null ? null : b.Spec.Stream.Offset">
            <HeaderTemplate>Desired Offset</HeaderTemplate>
        </Column>
        <Column TData="Broker" CssClass="text-end">
            <HeaderTemplate />
            <CellTemplate Context="context">
                <button class="btn btn-outline-light btn-sm"><span class="bi bi-pencil"></span></button>
                <button class="btn btn-outline-light btn-sm" title="Deletes broker '@context.Item.Metadata.Name'" @onclick="async _ => await OnDeleteBroker(context.Item)"><span class="bi bi-trash"></span></button>
            </CellTemplate>
        </Column>
    </Columns>
</Table>

@code{

    List<Broker>? brokers;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);
        this.Store.Resources.Subscribe(OnBrokerCollectionChanged);
        await this.Store.ListResourcesAsync().ConfigureAwait(false);
    }

    void OnBrokerCollectionChanged(List<Broker>? brokers)
    {
        if (brokers == null) this.brokers = null;
        else this.brokers = brokers;
        this.StateHasChanged();
    }

    async Task OnDeleteBroker(Broker broker)
    {
        await this.Store.DeleteResourceAsync(broker).ConfigureAwait(false);
    }

}