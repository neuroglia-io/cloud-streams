@namespace CloudStreams.Dashboard.Pages.Networks.List
@page "/networks"
@using System.Reactive.Linq
@using CloudStreams.Dashboard.StateManagement
@inherits ResourceManagementComponent<Network>
@inject ICloudStreamsApiClient CloudStreamsApi

<ApplicationTitle>Networks</ApplicationTitle>

<Table Items="networks"
    AutoGenerateColumns="false"
    TableClass="table table-striped table-hover"
    RowClass="cursor-pointer">
    <RowTemplate>
        <Row RenderContext="context" OnClick="async _ => await OnShowResourceOffcanvasAsync(context.Item)" />
    </RowTemplate>
    <Columns>
        <Column TData="Network"
            ValueProvider="n => n.Metadata.Name">
            <HeaderTemplate>Name</HeaderTemplate>
        </Column>
        <Column TData="Network"
            ValueProvider="s => s.Metadata.CreationTimestamp">
            <HeaderTemplate>Created At</HeaderTemplate>
        </Column>
        <Column TData="Network" CssClass="text-end">
            <HeaderTemplate />
            <CellTemplate Context="context">
                <button class="btn btn-outline-danger btn-sm" title="Delete '@context.Item.Metadata.Name'" @onclick="async _ => await OnDeleteNetwork(context.Item)" @onclick:preventDefault @onclick:stopPropagation><span class="bi bi-trash"></span></button>
            </CellTemplate>
        </Column>
    </Columns>
</Table>

<ResourceOffcanvas TResource="Network" @ref="offcanvas" Size="OffcanvasSize.Large" ReadOnly="true" UseBackdrop="false" />

<ConfirmDialog @ref="dialog" />

@code{

    List<Network>? networks;
    ResourceOffcanvas<Network>? offcanvas;
    ConfirmDialog? dialog;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);
        this.Store.Resources.Subscribe(OnNetworkCollectionChanged, token: this.CancellationTokenSource.Token);
        await this.Store.ListResourcesAsync().ConfigureAwait(false); ;
    }

    void OnNetworkCollectionChanged(List<Network>? networks)
    {
        if (networks == null) this.networks = null;
        else this.networks = networks;
        this.StateHasChanged();
    }

    async Task OnDeleteNetwork(Network network)
    {
        if (this.dialog == null) return;
        var confirmation = await this.dialog.ShowAsync(
            title: $"Are you sure you want to delete '{network.Metadata.Name}'?",
            message1: "The resource will be permanently deleted. Are you sure you want to proceed ?",
            confirmDialogOptions: new ConfirmDialogOptions() 
            {
                YesButtonColor = ButtonColor.Danger,
                YesButtonText = "Delete",
                NoButtonText = "Abort",
                IsVerticallyCentered = true
            }
        );
        if (!confirmation) return;
        await this.Store.DeleteResourceAsync(network).ConfigureAwait(false);
    }

    Task OnShowResourceOffcanvasAsync(Network network)
    {
        if (this.offcanvas == null) return Task.CompletedTask;
        this.offcanvas.SetResource(network);
        return this.offcanvas.ShowAsync();
    }

}