@namespace CloudStreams.Dashboard.Pages.CloudEvents.List
@page "/events"
@using CloudStreams.Dashboard.Pages.CloudEvents.List
@using System.Reactive.Linq
@using CloudStreams.Dashboard.StateManagement
@inherits StatefulComponent<CloudEventListStore, CloudEventListState>
@inject ICloudStreamsApiClient CloudStreamsApi

<ApplicationTitle>Events</ApplicationTitle>

<ReadOptionsForm @ref="readOptionForm" OnChange="Store.SetReadOptions"></ReadOptionsForm>

<div class="table-container">
    @if (loading)
    {
        <div class="loading">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th class="sticky-header">Sequence</th>
                <th class="sticky-header">Id</th>
                <th class="sticky-header">Time</th>
                <th class="sticky-header">Source</th>
                <th class="sticky-header">Type</th>
                <th class="sticky-header">Subject</th>
                <th class="sticky-header">Data Schema</th>
                <th class="sticky-header">Data Content Type</th>
            </tr>
        </thead>
        <tbody>
            @if (events != null && events.Any())
            {
                <Virtualize Context="e" Items="@events">
                    <tr @onclick="async _ => await OnShowCloudEventOffcanvasAsync(e)" class="cursor-pointer">
                        <td>@(e.ExtensionAttributes?[CloudEventExtensionAttributes.Sequence] ?? "")</td>
                        <td>@e.Id</td>
                        <td>@(e.Time == null ? "" : e.Time!.Value.LocalDateTime.ToString("R"))</td>
                        <td><a href="#by-source" @onclick:preventDefault @onclick:stopPropagation @onclick="_ => OnReadCloudEventPartition(CloudEventPartitionType.BySource, e.Source.ToString())">@e.Source</a></td>
                        <td><a href="#by-type" @onclick:preventDefault @onclick:stopPropagation @onclick="_ => OnReadCloudEventPartition(CloudEventPartitionType.ByType, e.Type)">@e.Type</a></td>
                        <td>
                            @if (!string.IsNullOrWhiteSpace(e.Subject))
                            {
                                <a href="#by-subject" @onclick:preventDefault @onclick:stopPropagation @onclick="_ => OnReadCloudEventPartition(CloudEventPartitionType.BySubject, e.Subject)">@e.Subject</a>
                            }
                        </td>
                        <td>
                            @if (e.DataSchema != null)
                            {
                                <a href="@e.DataSchema" target="_blank">@e.DataSchema</a>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrWhiteSpace(e.DataContentType))
                            {
                                <span class="badge rounded-pill text-bg-primary bg-primary-subtle">@e.DataContentType</span>
                            }
                        </td>
                    </tr>    
                </Virtualize>
            }
        </tbody>
    </table>
</div>

<Offcanvas @ref="offcanvas" Size="OffcanvasSize.Large" ReadOnly="true" UseBackdrop="false" />

@code {

    List<CloudEvent>? events;
    Offcanvas? offcanvas;
    ReadOptionsForm? readOptionForm;
    bool loading = false;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);
        this.Store.Loading.Subscribe(loading => this.OnStateChanged(cmp => cmp.loading = loading), token: this.CancellationTokenSource.Token);
        this.Store.CloudEvents.Subscribe(this.OnCloudEventCollectionChanged, token: this.CancellationTokenSource.Token);
    }

    /// <summary>
    /// Patches the <see cref="View"/>'s fields after a <see cref="CloudEventListStore"/>'s change
    /// </summary>
    /// <param name="patch">The patch to apply</param>
    private void OnStateChanged(Action<View> patch)
    {
        patch(this);
        this.StateHasChanged();
    }

    void OnReadCloudEventPartition(CloudEventPartitionType type, string id)
    {
        if (this.readOptionForm != null) this.readOptionForm.SetPartition(type, id);
    }

    void OnCloudEventCollectionChanged(List<CloudEvent>? events)
    {
        if (this.events == events) return;
        this.events = events;
        this.StateHasChanged();
    }

    Task OnShowCloudEventOffcanvasAsync(CloudEvent e)
    {
        if (this.offcanvas == null) return Task.CompletedTask;
        var parameters = new Dictionary<string, object>();
        parameters.Add("ReadOnly", true);
        parameters.Add("CloudEvent", e);
        return this.offcanvas.ShowAsync<CloudEventDetails>(title: "Cloud Event Details", parameters: parameters);
    }

}