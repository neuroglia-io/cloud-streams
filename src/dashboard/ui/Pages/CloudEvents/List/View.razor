@namespace CloudStreams.Dashboard.Pages.CloudEvents.List
@page "/events"
@using CloudStreams.Dashboard.Pages.CloudEvents.List
@using System.Reactive.Linq
@using CloudStreams.Dashboard.StateManagement
@inherits StatefulComponent<CloudEventListStore, CloudEventListState>
@implements IDisposable

<PageTitle>Cloud Events</PageTitle>

<PartitionFilter Partitions="partitions" Partition="partition" OnChange="(e) => OnSetCloudEventPartition(e)"></PartitionFilter>

<Table Items="events"
    AutoGenerateColumns="false"
    TableClass="table table-striped table-hover">
    <Columns>
        <Column TData="CloudEvent" 
            ValueProvider="e => e.ExtensionAttributes == null ? null : e.ExtensionAttributes[CloudEventExtensionAttributes.Sequence]">
            <HeaderTemplate>Sequence</HeaderTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Id">
            <HeaderTemplate>Id</HeaderTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Time"
                Format="R">
            <HeaderTemplate>Time</HeaderTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Source">
            <HeaderTemplate>Source</HeaderTemplate>
            <CellTemplate Context="context">
                <a href="#by-source" @onclick:preventDefault="true" @onclick="_ => OnReadCloudEventPartition(CloudEventPartitionType.BySource, context.Value!.ToString()!)">@context.Value</a>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Type">
            <HeaderTemplate>Type</HeaderTemplate>
            <CellTemplate Context="context">
                <a href="#by-type" @onclick:preventDefault="true" @onclick="_ => OnReadCloudEventPartition(CloudEventPartitionType.ByType, context.Value!.ToString()!)">@context.Value</a>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Subject">
            <HeaderTemplate>Subject</HeaderTemplate>
            <CellTemplate Context="context">
                <a href="#by-subject" @onclick:preventDefault="true" @onclick="_ => OnReadCloudEventPartition(CloudEventPartitionType.BySubject, context.Value!.ToString()!)">@context.Value</a>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.DataSchema">
            <HeaderTemplate>Data Schema</HeaderTemplate>
            <CellTemplate Context="context">
                <a href="@context.Value" target="_blank">@context.Value</a>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.DataContentType">
            <HeaderTemplate>Data Content Type</HeaderTemplate>
            <CellTemplate Context="context">
                <span class="badge rounded-pill text-bg-primary bg-primary-subtle">@context.Value</span>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent">
            <HeaderTemplate />
            <CellTemplate Context="context">
                <button class="btn btn-outline-light btn-sm" @onclick="async e => await OnShowCloudEventModalAsync(context.Item)"><span class="bi bi-info-circle"></span> &nbsp; Details</button>
            </CellTemplate>
        </Column>
    </Columns>
</Table>

<CloudEventModal @ref="modal" ReadOnly="true" />

@code{

    List<CloudEvent>? events;
    List<CloudEventPartitionMetadata>? partitions;
    CloudEventPartitionRef? partition;
    CloudEventModal? modal;

    private bool _Disposed;

    /// <summary>
    /// Gets the <see cref="ComponentStore{TState}"/>'s <see cref="System.Threading.CancellationTokenSource"/>
    /// </summary>
    protected CancellationTokenSource CancellationTokenSource { get; } = new CancellationTokenSource();

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);
        this.Store.Partition.Subscribe(partition => OnPartitionChanged(partition), token: this.CancellationTokenSource.Token);
        this.Store.CloudEvents.Subscribe(events => OnCloudEventCollectionChanged(events), token: this.CancellationTokenSource.Token);
        this.Store.Partitions.Subscribe(partitions => OnPartitionsChanged(partitions), token: this.CancellationTokenSource.Token); 
    }

    void OnSetCloudEventPartition(CloudEventPartitionRef? partition)
    {
        this.Store.ReduceStreamReadOptions(options => options with 
        {
            Partition = partition
        });
    }

    void OnReadCloudEventPartition(CloudEventPartitionType type, string id)
    {
        this.OnSetCloudEventPartition(new CloudEventPartitionRef() { Type = type, Id = id });
    }

    void OnPartitionChanged(CloudEventPartitionRef? partition)
    {
        if (this.partition != partition) {
            this.partition = partition;
            this.StateHasChanged();
        }
    }

    void OnCloudEventCollectionChanged(List<CloudEvent>? events)
    {
        if (this.events != events) {
            this.events = events;
            this.StateHasChanged();
        }
    }

    void OnPartitionsChanged(List<CloudEventPartitionMetadata>? partitions)
    {
        if (this.partitions != partitions) {
            this.partitions = partitions;
            this.StateHasChanged();
        }
    }

    Task OnShowCloudEventModalAsync(CloudEvent e)
    {
        if (this.modal == null) return Task.CompletedTask;
        this.modal.SetCloudEvent(e);
        return this.modal.ShowAsync();
    }

    /// <summary>
    /// Disposes of the <see cref="ComponentStore{TState}"/>
    /// </summary>
    /// <param name="disposing">A boolean indicating whether or not the <see cref="ComponentStore{TState}"/> is being disposed of</param>
    protected override void Dispose(bool disposing)
    {
        if (!disposing) return;
        if (!this._Disposed)
        {
            if (disposing)
            {
                this.CancellationTokenSource.Dispose();
            }
            this._Disposed = true;
        }
        base.Dispose(disposing);
    }

}