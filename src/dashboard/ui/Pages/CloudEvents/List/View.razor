@namespace CloudStreams.Dashboard.Pages.CloudEvents.List
@page "/events"
@using CloudStreams.Dashboard.Pages.CloudEvents.List
@using System.Reactive.Linq
@using CloudStreams.Dashboard.StateManagement
@inherits StatefulComponent<CloudEventListStore, CloudEventListState>
@inject ICloudStreamsGatewayApiClient CloudStreamsGatewayApi

<PageTitle>Cloud Events</PageTitle>

<div id="partition-filter" class="input-group mb-3">
    <div class="form-floating">
        <select id="partitionType" class="form-select" name="partitionType" @onchange="e => OnSetCloudEventPartitionType(string.IsNullOrWhiteSpace((string?)e.Value) ? null : Enum.Parse<CloudEventPartitionType>((string)e.Value!))">
            <option value="" selected="@(readOptions.Partition == null)"></option>
            @foreach (var value in Enum.GetValues<CloudEventPartitionType>())
            {
                <option value="@value" selected="@(readOptions.Partition?.Type == value)">@value</option>
            }
        </select>
        <label for="partitionType">Partition Type</label>
    </div>
    <div class="form-floating">
        <input id="partitionValue" type="text" class="form-control" value="@readOptions.Partition?.Id" list="partitions" autocomplete="on" @onchange="e => OnSetCloudEventPartitionId((string?)e.Value)" />
        <datalist id="partitions">
            @if(readOptions.Partition != null && partitions != null)
            {
                foreach (var partition in partitions)
                {
                    <option value="@partition.Id"></option>
                }
            }
        </datalist>
        <label for="partitionValue">Value</label>
    </div>
</div>

<Table Items="events"
    AutoGenerateColumns="false"
    TableClass="table table-striped table-hover">
    <Columns>
        <Column TData="CloudEvent" 
            ValueProvider="e => e.ExtensionAttributes == null ? null : e.ExtensionAttributes[CloudEventExtensionAttributes.Sequence]">
            <HeaderTemplate>Sequence</HeaderTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Id">
            <HeaderTemplate>Id</HeaderTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Time"
                Format="R">
            <HeaderTemplate>Time</HeaderTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Source">
            <HeaderTemplate>Source</HeaderTemplate>
            <CellTemplate Context="context">
                <a href="#by-source" @onclick="_ => OnReadCloudEventPartition(CloudEventPartitionType.BySource, context.Value!.ToString()!)">@context.Value</a>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Type">
            <HeaderTemplate>Type</HeaderTemplate>
            <CellTemplate Context="context">
                <a href="#by-type" @onclick="_ => OnReadCloudEventPartition(CloudEventPartitionType.ByType, context.Value!.ToString()!)">@context.Value</a>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Subject">
            <HeaderTemplate>Subject</HeaderTemplate>
            <CellTemplate Context="context">
                <a href="#by-subject" @onclick="_ => OnReadCloudEventPartition(CloudEventPartitionType.BySubject, context.Value!.ToString()!)">@context.Value</a>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.DataSchema">
            <HeaderTemplate>Data Schema</HeaderTemplate>
            <CellTemplate Context="context">
                <a href="@context.Value" target="_blank">@context.Value</a>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.DataContentType">
            <HeaderTemplate>Data Content Type</HeaderTemplate>
            <CellTemplate Context="context">
                <span class="badge rounded-pill text-bg-primary bg-primary-subtle">@context.Value</span>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent">
            <HeaderTemplate />
            <CellTemplate Context="context">
                <button class="btn btn-outline-light btn-sm" @onclick="async e => await OnShowCloudEventModalAsync(context.Item)"><small class="bi bi-info-circle"></small><span class="btn-label">Details</span></button>
            </CellTemplate>
        </Column>
    </Columns>
</Table>

<CloudEventModal @ref="modal" ReadOnly="true" />

@code{

    CloudEventStreamReadOptions readOptions = new();
    List<CloudEvent>? events;
    List<CloudEventPartitionMetadata>? partitions;
    CloudEventModal? modal;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);
        this.Store.ReadOptions.Subscribe(async options => await OnCloudEventStreamReadOptionsChangedAsync(options));
        this.Store.CloudEvents.Subscribe(async events => await OnCloudEventCollectionChangedAsync(events));
    }

    void OnSetCloudEventPartitionType(CloudEventPartitionType? partitionType)
    {
        this.Store.ReduceStreamReadOptions(options => options with 
        { 
            Partition = !partitionType.HasValue ? null : new() { Type = partitionType.Value }
        });
    }

    void OnSetCloudEventPartitionId(string? partitionId)
    {
        this.Store.ReduceStreamReadOptions(options => options with 
        { 
            Partition = string.IsNullOrWhiteSpace(partitionId) || readOptions.Partition == null ? null : new(readOptions.Partition.Type, partitionId) 
        });
    }

    void OnReadCloudEventPartition(CloudEventPartitionType type, string id)
    {
        this.Store.ReduceStreamReadOptions(options => options with 
        { 
            Partition = new(type, id) 
        });
    }

    async Task OnCloudEventStreamReadOptionsChangedAsync(CloudEventStreamReadOptions readOptions)
    {
        this.readOptions = readOptions;
        if(this.readOptions.Partition != null) this.partitions = (await (await this.CloudStreamsGatewayApi.CloudEvents.Partitions.ListPartitionsByTypeAsync(this.readOptions.Partition.Type)).ToListAsync().ConfigureAwait(false))!;
        this.StateHasChanged();
    }

    async Task OnCloudEventCollectionChangedAsync(IAsyncEnumerable<CloudEvent?>? events)
    {
        if (events == null) this.events = null;
        else this.events = (await events.ToListAsync().ConfigureAwait(false))!;
        this.StateHasChanged();
    }

    Task OnShowCloudEventModalAsync(CloudEvent e)
    {
        if (this.modal == null) return Task.CompletedTask;
        this.modal.SetCloudEvent(e);
        return this.modal.ShowAsync();
    }

}