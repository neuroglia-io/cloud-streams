@namespace CloudStreams.Dashboard.Pages.CloudEvents.List
@page "/events"
@using CloudStreams.Dashboard.Pages.CloudEvents.List
@using System.Reactive.Linq
@using CloudStreams.Dashboard.StateManagement
@inherits StatefulComponent<CloudEventListStore, CloudEventListState>

<PageTitle>Cloud Events</PageTitle>

<ReadOptionsForm @ref="readOptionForm" OnChange="Store.SetReadOptions"></ReadOptionsForm>

<Table Items="events"
    AutoGenerateColumns="false"
    TableClass="table table-striped table-hover">
    <Columns>
        <Column TData="CloudEvent" 
            ValueProvider="e => e.ExtensionAttributes == null ? null : e.ExtensionAttributes[CloudEventExtensionAttributes.Sequence]">
            <HeaderTemplate>Sequence</HeaderTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Id">
            <HeaderTemplate>Id</HeaderTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Time"
                Format="R">
            <HeaderTemplate>Time</HeaderTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Source">
            <HeaderTemplate>Source</HeaderTemplate>
            <CellTemplate Context="context">
                <a href="#by-source" @onclick:preventDefault="true" @onclick="_ => OnReadCloudEventPartition(CloudEventPartitionType.BySource, context.Value!.ToString()!)">@context.Value</a>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Type">
            <HeaderTemplate>Type</HeaderTemplate>
            <CellTemplate Context="context">
                <a href="#by-type" @onclick:preventDefault="true" @onclick="_ => OnReadCloudEventPartition(CloudEventPartitionType.ByType, context.Value!.ToString()!)">@context.Value</a>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.Subject">
            <HeaderTemplate>Subject</HeaderTemplate>
            <CellTemplate Context="context">
                <a href="#by-subject" @onclick:preventDefault="true" @onclick="_ => OnReadCloudEventPartition(CloudEventPartitionType.BySubject, context.Value!.ToString()!)">@context.Value</a>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.DataSchema">
            <HeaderTemplate>Data Schema</HeaderTemplate>
            <CellTemplate Context="context">
                <a href="@context.Value" target="_blank">@context.Value</a>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent"
                ValueProvider="e => e.DataContentType">
            <HeaderTemplate>Data Content Type</HeaderTemplate>
            <CellTemplate Context="context">
                <span class="badge rounded-pill text-bg-primary bg-primary-subtle">@context.Value</span>
            </CellTemplate>
        </Column>
        <Column TData="CloudEvent">
            <HeaderTemplate />
            <CellTemplate Context="context">
                <button class="btn btn-outline-light btn-sm" @onclick="async e => await OnShowCloudEventModalAsync(context.Item)"><span class="bi bi-info-circle"></span> &nbsp; Details</button>
            </CellTemplate>
        </Column>
    </Columns>
</Table>

<CloudEventModal @ref="modal" ReadOnly="true" />

@code{

    private List<CloudEvent>? events;
    private CloudEventModal? modal;
    private ReadOptionsForm? readOptionForm;

    private bool disposed;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);
        this.Store.CloudEvents.Subscribe(this.OnCloudEventCollectionChanged, token: this.CancellationTokenSource.Token);
    }

    private void OnReadCloudEventPartition(CloudEventPartitionType type, string id)
    {
        if (this.readOptionForm != null) this.readOptionForm.SetPartition(type, id);
    }

    private void OnCloudEventCollectionChanged(List<CloudEvent>? events)
    {
        if (this.events == events) return;
        this.events = events;
        this.StateHasChanged();
    }

    private Task OnShowCloudEventModalAsync(CloudEvent e)
    {
        if (this.modal == null) return Task.CompletedTask;
        this.modal.SetCloudEvent(e);
        return this.modal.ShowAsync();
    }

}