@namespace CloudStreams.Dashboard.Pages.Gateways.List
@page "/gateways"
@using System.Reactive.Linq
@using CloudStreams.Dashboard.StateManagement
@inherits ResourceManagementComponent<Gateway>
@inject ICloudStreamsApiClient CloudStreamsApi

<ApplicationTitle>Gateways</ApplicationTitle>

<Table Items="gateways"
    AutoGenerateColumns="false"
    TableClass="table table-striped table-hover"
    RowClass="cursor-pointer">
    <RowTemplate>
        <Row RenderContext="context" OnClick="async _ => await OnShowResourceOffcanvasAsync(context.Item)" />
    </RowTemplate>
    <Columns>
        <Column TData="Gateway"
            ValueProvider="c => c.Metadata.Name">
            <HeaderTemplate>Name</HeaderTemplate>
        </Column>
        <Column TData="Gateway"
                ValueProvider="s => s.Metadata.CreationTimestamp">
            <HeaderTemplate>Created At</HeaderTemplate>
        </Column>
        <Column TData="Gateway"
                ValueProvider="c => c.Spec.Authorization == null ? null : c.Spec.Authorization.DecisionStrategy">
            <HeaderTemplate>Authorization Strategy</HeaderTemplate>
        </Column>
        <Column TData="Gateway"
                ValueProvider="c => c.Spec.Validation == null ? null : c.Spec.Validation.SkipValidation">
            <HeaderTemplate>Skip Validation</HeaderTemplate>
        </Column>
        <Column TData="Gateway" CssClass="text-end">
            <HeaderTemplate />
            <CellTemplate Context="context">
                <button class="btn btn-outline-danger btn-sm" title="Delete '@context.Item.Metadata.Name'" @onclick="async _ => await OnDeleteGateway(context.Item)" @onclick:preventDefault @onclick:stopPropagation><span class="bi bi-trash"></span></button>
            </CellTemplate>
        </Column>
    </Columns>
</Table>

<Offcanvas @ref="offcanvas" Size="OffcanvasSize.Large" UseBackdrop="false" BodyCssClass="d-flex flex-column" />

<ConfirmDialog @ref="dialog" />

@code{

    List<Gateway>? gateways;
    Offcanvas? offcanvas;
    ConfirmDialog? dialog;
    ResourceDefinition? definition;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);
        this.Store.Definition.Subscribe(definition => this.definition = definition, token: this.CancellationTokenSource.Token);
        this.Store.Resources.Subscribe(OnGatewayCollectionChanged, token: this.CancellationTokenSource.Token);
        await this.Store.GetResourceDefinitionAsync().ConfigureAwait(false);
        await this.Store.ListResourcesAsync().ConfigureAwait(false);
    }

    void OnGatewayCollectionChanged(List<Gateway>? gateways)
    {
        if (gateways == null) this.gateways = null;
        else this.gateways = gateways;
        this.StateHasChanged();
    }

    async Task OnDeleteGateway(Gateway gateway)
    {
        if (this.dialog == null) return;
        var confirmation = await this.dialog.ShowAsync(
            title: $"Are you sure you want to delete '{gateway.Metadata.Name}'?",
            message1: "The resource will be permanently deleted. Are you sure you want to proceed ?",
            confirmDialogOptions: new ConfirmDialogOptions()
            {
                YesButtonColor = ButtonColor.Danger,
                YesButtonText = "Delete",
                NoButtonText = "Abort",
                IsVerticallyCentered = true
            }
        );
        if (!confirmation) return;
        await this.Store.DeleteResourceAsync(gateway).ConfigureAwait(false);
    }

    Task OnShowResourceOffcanvasAsync(Gateway gateway)
    {
        if (this.offcanvas == null) return Task.CompletedTask;
        var parameters = new Dictionary<string, object>();
        parameters.Add("ReadOnly", true);
        parameters.Add("Resource", gateway);
        parameters.Add("Definition", this.definition!);
        return this.offcanvas.ShowAsync<ResourceDetails<Gateway>>(title: "Gateway details", parameters: parameters);
    }

}